#include <Servo.h>                           // Include servo library
#include <math.h>

#define RIGHTLED 7
#define LEFTLED 8
#define LBACKCAL 3                            // calibration, while going backwards, LBACKCAL++, CCW, LBACKCAL--, CW, 
#define RBACKCAL 2                            // calibration, while going forwards, RBACKCAL++, CCW. RBACKCAL--, CW.
#define BACKARCMOD 0.5                       // bot arcs (MOD)*faster/slower back than forwards (usually ~0.5)
Servo servoLeft;                             // Declare left and right servos
Servo servoRight;

/*
 * Robotics with the BOE Shield â€“ TestBothIrAndInciators
 * Test both IR detection circuits with the Serial Monitor.  Displays 1 if
 * the left IR detector does not detect an object, or 0 if it does.
 * Also displays IR detector states with indicator LEDs.
 */
 int wasnear;
 int senttime = 0;
 int state = 0;

void setup()                                 // Built-in initialization block
{
  tone(4, 3000, 1000);                       // Play tone for 1 second
  delay(1000);                               // Delay to finish tone

  pinMode(10, INPUT);  pinMode(9, OUTPUT);   // Left IR LED & Receiver
  pinMode(3, INPUT);  pinMode(2, OUTPUT);    // Right IR LED & Receiver
  pinMode(8, OUTPUT); pinMode(7, OUTPUT);    // Indicator LEDs

  Serial.begin(9600);                        // Set data rate to 9600 bps

  servoRight.attach(13);                      // Attach left signal to pin 13
  servoLeft.attach(12);                     // Attach right signal to pin 12

}

void loop()                                  // Main loop auto-repeats
{
  int irLeft = irDistance(9, 10, 21000, 10000);       // Check for object on left
  int irRight = irDistance(2, 3, 21000, 10000);       // Check for object on right

  digitalWrite(LEFTLED, (irLeft < 3));                // LED states opposite of IR
  digitalWrite(RIGHTLED, (irRight < 3));

  Serial.print(irLeft);                      // Display 1/0 no detect/detect
  Serial.print("  ");                        // Display
  Serial.println(irRight);                   // Display

  delay(100);                                // 0.1 second delay

  if (state == 0) {
    drive (5);
    if (!digitalRead(11))
      state =1;
  }
  
  else if (state == 1) {
    PivotTurn(30,0,1500);
    state = 2;
  }
  
  else if (state == 2) {
    follow (3, irLeft); // backwards doesn't work.
    if (!digitalRead(11))
      state = 3;
  }
      
  else if (state == 3) {
    AvoidPatient();
    state = 4;
  }
    
  else if (state = 4)
    halt();
}

// IR Object Detection Function

int irDetect(int irLedPin, int irReceiverPin, long frequency)
{
  tone(irLedPin, frequency, 8);              // IRLED 38 kHz for at least 1 ms
  delay(1);                                  // Wait 1 ms
  int ir = digitalRead(irReceiverPin);       // IR receiver -> ir variable
  delay(1);                                  // Down time before recheck
  return ir;                                 // Return 1 no detect, 0 detect
}

int irDistance(int irLedPin, int irReceivePin, long base, long limit)
{
  int distance = 0;
  for (long f = base; f >= limit; f -= 1000) {
    distance += irDetect(irLedPin, irReceivePin, f);
  }
  return distance;
}

void follow (int velocity, int distance) {
  Serial.write ("I'm following \n");

  int offset = distance - 3 ; // far offset is +ve, close offset is -ve
  if (offset > 0) //far
  {

        Serial.write("I'm far away, turning this much:");
        Serial.println(offset);
        fwCCWCompensatedArc (velocity, offset);
  }
    
  if (offset < 0) //close
  {
    Serial.write("I'm close by, turning this much:");
    Serial.println(abs(offset));
    fwCWCompensatedArc (velocity, abs(offset));
  }
}


void halt() {
  servoLeft.writeMicroseconds(1500);  //right turn
  servoRight.writeMicroseconds(1500);
}

void drive(int vel ) {
  servoLeft.writeMicroseconds(1500 + 5*vel + LBACKCAL);  //right turn
  servoRight.writeMicroseconds(1500 - 5*vel);
}

void AvoidPatient() {
  PivotTurn(30,0,1300);
  
  servoLeft.writeMicroseconds(1500 + 30);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 70); 
  delay (4700);  
  PivotTurn(30,0,1500);
  halt();
  delay (3000);
}

void PivotTurn(int vel, int left, int time)
{
  if (left) {
    servoLeft.writeMicroseconds(1500 - vel - LBACKCAL);  //left turn
    servoRight.writeMicroseconds(1500 - vel);
    delay (time);
  }
  else {
    servoLeft.writeMicroseconds(1500 + vel);  //right turn
    servoRight.writeMicroseconds(1500 + vel);
    delay (time);
  }
}

void fwCWCompensatedArc(int vel, int arc) { 
  Serial.write ("In fwCW:");
  Serial.print (vel);
  Serial.write (" ");
  Serial.println (arc);
  servoLeft.writeMicroseconds(1500 + 5*vel + arc*vel);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 5*vel); 
}

void fwCCWCompensatedArc(int vel, int arc) {
  Serial.write ("In fwCCCCCCCCW:");
  Serial.print (vel);
  Serial.write (" ");
  Serial.println (arc);
  servoLeft.writeMicroseconds(1500 + 5*vel);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 5*vel - arc*vel); 
}

void bwCCWCompensatedArc (int vel, int arc) {
  servoLeft.writeMicroseconds(1500 - RBACKCAL - vel - arc*vel*BACKARCMOD);
  servoRight.writeMicroseconds(1500  + vel); 
}

void bwCWCompensatedArc (int vel, int arc) {
  servoLeft.writeMicroseconds(1500 - RBACKCAL - vel);
  servoRight.writeMicroseconds(1500  + vel + arc*vel*BACKARCMOD); 
}
