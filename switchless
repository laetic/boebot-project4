#include <Servo.h>                           // Include servo library
#include <math.h>

#define RIGHTLED 7
#define LEFTLED 8
#define LBACKCAL 3                            // calibration, while going backwards, LBACKCAL++, CCW, LBACKCAL--, CW, 
#define RBACKCAL 2                            // calibration, while going forwards, RBACKCAL++, CCW. RBACKCAL--, CW.

#define FIND_BOARD 0
#define FOLLOW 1
#define LOAD_PATIENT 2
#define FOLLOW_BACK 3 
#define TO_MU 4
#define TERMINATE 5

Servo servoLeft;                             // Declare left and right servos
Servo servoRight;

int state;
int Corner1 = 0, Corner2 = 0, BoardTime, PatientTime; // Important times to calculate how to get home

void setup()                                 // Built-in initialization block
{
  tone(4, 3000, 1000);                       // Play tone for 1 second
  delay(1000);                               // Delay to finish tone

  pinMode(10, INPUT);  pinMode(9, OUTPUT);   // Left IR LED & Receiver
  pinMode(3, INPUT);  pinMode(2, OUTPUT);    // Right IR LED & Receiver
  pinMode(8, OUTPUT); pinMode(7, OUTPUT);    // Indicator LEDs

  Serial.begin(9600);                        // Set data rate to 9600 bps

  servoRight.attach(13);                      // Attach left signal to pin 13
  servoLeft.attach(12);                     // Attach right signal to pin 12

state = FIND_BOARD;
drive(5);

}

void loop()                                  // Main loop auto-repeats
{
  int irLeft = irDistance(9, 10, 21000, 10000);       // Check for object on left
  int irRight = irDistance(2, 3, 21000, 10000);       // Check for object on right

  digitalWrite(LEFTLED, (irLeft < 3));                // LED states opposite of IR
  digitalWrite(RIGHTLED, (irRight < 3));

  Serial.print(irLeft);                      // Display 1/0 no detect/detect
  Serial.print("  ");                        // Display
  Serial.println(irRight);                   // Display

  delay(100);                                // 0.1 second delay

// switch statement for do actions
switch (state) { 

case FIND_BOARD:
break;

case FOLLOW:
follow (3, irLeft);
if (CornerFound() && Corner1 == 0)
 Corner1 = millis();
break;

case LOAD_PATIENT:
EmitBeep();
FlashLight();
break;

case FOLLOW_BACK:
follow (3, irLeft);
if (CornerFound() && Corner2 == 0)
 Corner2 = millis();
break;

case TO_MU:
break;

case TERMINATE:
detach.ServoLeft;
detach.ServoRight;
break;

} // end of do switch statement
 
 
 //switch statement for entry/exit actions
switch (state) {

case FIND_BOARD:
if (!digitalRead(11)) {
 state = FOLLOW;
 BoardTime = millis();
 PivotTurn(30,0,1500);                          //CALLIBRATION NEEDED
 }
break;

case FOLLOW:
if (!digitalRead(11)) {
 state = LOAD_PATIENT;
 PatientTime = millis();
 }
break;

case LOAD_PATIENT:
if (millis() - PatientTimer >= 10000) {
 AvoidPatient();
 state = FOLLOW_BACK;
 }
break;

case FOLLOW_BACK:
if (millis() - Corner2 >= (Corner2 - Corner1 + TIMECONST - BoardTime))    //CALLIBRATION NEEDED
 PivotTurn (30,0,1500);                           // CALLIBRATION NEEDED
break;

case TO_MU:
if (!digitalRead(11)) {
 state = TERMINATE;
 halt();
 }
break;

case TERMINATE:
break;

} //end of entry/exit switch statement

} // end of main loop




void EmitBeep() { }

void FlashLight() { }

void CornerFound() { //modification of irCheckFive to very thoroughly check for a corner}



int irDetect(int irLedPin, int irReceiverPin, long frequency)
{
  tone(irLedPin, frequency, 8);              // IRLED 38 kHz for at least 1 ms
  delay(1);                                  // Wait 1 ms
  int ir = digitalRead(irReceiverPin);       // IR receiver -> ir variable
  delay(1);                                  // Down time before recheck
  return ir;                                 // Return 1 no detect, 0 detect
}

int irDistance(int irLedPin, int irReceivePin, long base, long limit)
{
  int distance = 0;
  for (long f = base; f >= limit; f -= 1000) {
    distance += irDetect(irLedPin, irReceivePin, f);
  }
  return distance;
}

void follow (int velocity, int distance) {
  Serial.write ("I'm following \n");

  int offset = distance - 3 ; // far offset is +ve, close offset is -ve
  if (offset > 0) //far
  {

        Serial.write("I'm far away, turning this much:");
        Serial.println(offset);
        fwCCWCompensatedArc (velocity, offset);
  }
    
  if (offset < 0) //close
  {
    Serial.write("I'm close by, turning this much:");
    Serial.println(abs(offset));
    fwCWCompensatedArc (velocity, abs(offset));
  }
}



void halt() {
  servoLeft.writeMicroseconds(1500);  //right turn
  servoRight.writeMicroseconds(1500);
}

void drive(int vel ) {
  servoLeft.writeMicroseconds(1500 + 5*vel + LBACKCAL);  //right turn
  servoRight.writeMicroseconds(1500 - 5*vel);
}

void AvoidPatient() {
  PivotTurn(30,0,1300);
  
  servoLeft.writeMicroseconds(1500 + 30);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 70); 
  delay (4700);  
  PivotTurn(30,0,1500);
  halt();
  delay (3000);
}

void PivotTurn(int vel, int left, int time)
{
  if (left) {
    servoLeft.writeMicroseconds(1500 - vel - LBACKCAL);  //left turn
    servoRight.writeMicroseconds(1500 - vel);
    delay (time);
  }
  else {
    servoLeft.writeMicroseconds(1500 + vel);  //right turn
    servoRight.writeMicroseconds(1500 + vel);
    delay (time);
  }
}

void fwCWCompensatedArc(int vel, int arc) { 
  Serial.write ("In fwCW:");
  Serial.print (vel);
  Serial.write (" ");
  Serial.println (arc);
  servoLeft.writeMicroseconds(1500 + 5*vel + arc*vel);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 5*vel); 
}

void fwCCWCompensatedArc(int vel, int arc) {
  Serial.write ("In fwCCCCCCCCW:");
  Serial.print (vel);
  Serial.write (" ");
  Serial.println (arc);
  servoLeft.writeMicroseconds(1500 + 5*vel);
  servoRight.writeMicroseconds(1500 - LBACKCAL - 5*vel - arc*vel); 
}

void bwCCWCompensatedArc (int vel, int arc) {
  servoLeft.writeMicroseconds(1500 - RBACKCAL - vel - arc*vel*BACKARCMOD);
  servoRight.writeMicroseconds(1500  + vel); 
}

void bwCWCompensatedArc (int vel, int arc) {
  servoLeft.writeMicroseconds(1500 - RBACKCAL - vel);
  servoRight.writeMicroseconds(1500  + vel + arc*vel*BACKARCMOD); 
}
